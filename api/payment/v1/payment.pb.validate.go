// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment/v1/payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClientTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientTokenRequestMultiError, or nil if none found.
func (m *ClientTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClientTokenRequestMultiError(errors)
	}

	return nil
}

// ClientTokenRequestMultiError is an error wrapping multiple validation errors
// returned by ClientTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type ClientTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientTokenRequestMultiError) AllErrors() []error { return m }

// ClientTokenRequestValidationError is the validation error returned by
// ClientTokenRequest.Validate if the designated constraints aren't met.
type ClientTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientTokenRequestValidationError) ErrorName() string {
	return "ClientTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClientTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientTokenRequestValidationError{}

// Validate checks the field values on ClientTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientTokenResponseMultiError, or nil if none found.
func (m *ClientTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientToken

	if len(errors) > 0 {
		return ClientTokenResponseMultiError(errors)
	}

	return nil
}

// ClientTokenResponseMultiError is an error wrapping multiple validation
// errors returned by ClientTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type ClientTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientTokenResponseMultiError) AllErrors() []error { return m }

// ClientTokenResponseValidationError is the validation error returned by
// ClientTokenResponse.Validate if the designated constraints aren't met.
type ClientTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientTokenResponseValidationError) ErrorName() string {
	return "ClientTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClientTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientTokenResponseValidationError{}

// Validate checks the field values on PaymentMethod with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethod with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentMethodMultiError, or
// nil if none found.
func (m *PaymentMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for IsEnabled

	if len(errors) > 0 {
		return PaymentMethodMultiError(errors)
	}

	return nil
}

// PaymentMethodMultiError is an error wrapping multiple validation errors
// returned by PaymentMethod.ValidateAll() if the designated constraints
// aren't met.
type PaymentMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodMultiError) AllErrors() []error { return m }

// PaymentMethodValidationError is the validation error returned by
// PaymentMethod.Validate if the designated constraints aren't met.
type PaymentMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodValidationError) ErrorName() string { return "PaymentMethodValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodValidationError{}

// Validate checks the field values on PaymentMethodFee with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentMethodFee) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethodFee with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMethodFeeMultiError, or nil if none found.
func (m *PaymentMethodFee) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethodFee) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMethod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMethodFeeValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMethodFeeValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMethodFeeValidationError{
				field:  "PaymentMethod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMethodFeeValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMethodFeeValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMethodFeeValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentMethodFeeMultiError(errors)
	}

	return nil
}

// PaymentMethodFeeMultiError is an error wrapping multiple validation errors
// returned by PaymentMethodFee.ValidateAll() if the designated constraints
// aren't met.
type PaymentMethodFeeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodFeeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodFeeMultiError) AllErrors() []error { return m }

// PaymentMethodFeeValidationError is the validation error returned by
// PaymentMethodFee.Validate if the designated constraints aren't met.
type PaymentMethodFeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodFeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodFeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodFeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodFeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodFeeValidationError) ErrorName() string { return "PaymentMethodFeeValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMethodFeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethodFee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodFeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodFeeValidationError{}

// Validate checks the field values on CalculateTransactionFeesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateTransactionFeesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateTransactionFeesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CalculateTransactionFeesRequestMultiError, or nil if none found.
func (m *CalculateTransactionFeesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateTransactionFeesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CalculateTransactionFeesRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CalculateTransactionFeesRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CalculateTransactionFeesRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CalculateTransactionFeesRequestMultiError(errors)
	}

	return nil
}

// CalculateTransactionFeesRequestMultiError is an error wrapping multiple
// validation errors returned by CalculateTransactionFeesRequest.ValidateAll()
// if the designated constraints aren't met.
type CalculateTransactionFeesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateTransactionFeesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateTransactionFeesRequestMultiError) AllErrors() []error { return m }

// CalculateTransactionFeesRequestValidationError is the validation error
// returned by CalculateTransactionFeesRequest.Validate if the designated
// constraints aren't met.
type CalculateTransactionFeesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateTransactionFeesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateTransactionFeesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateTransactionFeesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateTransactionFeesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateTransactionFeesRequestValidationError) ErrorName() string {
	return "CalculateTransactionFeesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateTransactionFeesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateTransactionFeesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateTransactionFeesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateTransactionFeesRequestValidationError{}

// Validate checks the field values on CalculateTransactionFeesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CalculateTransactionFeesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateTransactionFeesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CalculateTransactionFeesResponseMultiError, or nil if none found.
func (m *CalculateTransactionFeesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateTransactionFeesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentMethodFees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CalculateTransactionFeesResponseValidationError{
						field:  fmt.Sprintf("PaymentMethodFees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CalculateTransactionFeesResponseValidationError{
						field:  fmt.Sprintf("PaymentMethodFees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CalculateTransactionFeesResponseValidationError{
					field:  fmt.Sprintf("PaymentMethodFees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CalculateTransactionFeesResponseMultiError(errors)
	}

	return nil
}

// CalculateTransactionFeesResponseMultiError is an error wrapping multiple
// validation errors returned by
// CalculateTransactionFeesResponse.ValidateAll() if the designated
// constraints aren't met.
type CalculateTransactionFeesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateTransactionFeesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateTransactionFeesResponseMultiError) AllErrors() []error { return m }

// CalculateTransactionFeesResponseValidationError is the validation error
// returned by CalculateTransactionFeesResponse.Validate if the designated
// constraints aren't met.
type CalculateTransactionFeesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateTransactionFeesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateTransactionFeesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateTransactionFeesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateTransactionFeesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateTransactionFeesResponseValidationError) ErrorName() string {
	return "CalculateTransactionFeesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateTransactionFeesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateTransactionFeesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateTransactionFeesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateTransactionFeesResponseValidationError{}

// Validate checks the field values on ProcessPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessPaymentRequestMultiError, or nil if none found.
func (m *ProcessPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ProcessPaymentRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserKey

	if m.GetAmount() == nil {
		err := ProcessPaymentRequestValidationError{
			field:  "Amount",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessPaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessPaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessPaymentRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentMethodNonce

	if _, ok := _ProcessPaymentRequest_PaymentMethod_InLookup[m.GetPaymentMethod()]; !ok {
		err := ProcessPaymentRequestValidationError{
			field:  "PaymentMethod",
			reason: "value must be in list [GooglePay ApplePay Mastercard Visa AmericanExpress PayPal BankTransfer Cash]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessPaymentRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessPaymentRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessPaymentRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessPaymentRequestMultiError(errors)
	}

	return nil
}

// ProcessPaymentRequestMultiError is an error wrapping multiple validation
// errors returned by ProcessPaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessPaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessPaymentRequestMultiError) AllErrors() []error { return m }

// ProcessPaymentRequestValidationError is the validation error returned by
// ProcessPaymentRequest.Validate if the designated constraints aren't met.
type ProcessPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessPaymentRequestValidationError) ErrorName() string {
	return "ProcessPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessPaymentRequestValidationError{}

var _ProcessPaymentRequest_PaymentMethod_InLookup = map[string]struct{}{
	"GooglePay":       {},
	"ApplePay":        {},
	"Mastercard":      {},
	"Visa":            {},
	"AmericanExpress": {},
	"PayPal":          {},
	"BankTransfer":    {},
	"Cash":            {},
}

// Validate checks the field values on ProcessPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessPaymentResponseMultiError, or nil if none found.
func (m *ProcessPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PaymentTransactionId

	// no validation rules for ClientSecret

	// no validation rules for TransactionStatus

	if len(errors) > 0 {
		return ProcessPaymentResponseMultiError(errors)
	}

	return nil
}

// ProcessPaymentResponseMultiError is an error wrapping multiple validation
// errors returned by ProcessPaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type ProcessPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessPaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessPaymentResponseMultiError) AllErrors() []error { return m }

// ProcessPaymentResponseValidationError is the validation error returned by
// ProcessPaymentResponse.Validate if the designated constraints aren't met.
type ProcessPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessPaymentResponseValidationError) ErrorName() string {
	return "ProcessPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessPaymentResponseValidationError{}

// Validate checks the field values on RefundPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundPaymentRequestMultiError, or nil if none found.
func (m *RefundPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTransactionId()) != 24 {
		err := RefundPaymentRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be 24 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefundPaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefundPaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefundPaymentRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefundPaymentRequestMultiError(errors)
	}

	return nil
}

// RefundPaymentRequestMultiError is an error wrapping multiple validation
// errors returned by RefundPaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type RefundPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundPaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundPaymentRequestMultiError) AllErrors() []error { return m }

// RefundPaymentRequestValidationError is the validation error returned by
// RefundPaymentRequest.Validate if the designated constraints aren't met.
type RefundPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundPaymentRequestValidationError) ErrorName() string {
	return "RefundPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundPaymentRequestValidationError{}

// Validate checks the field values on RefundPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundPaymentResponseMultiError, or nil if none found.
func (m *RefundPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PaymentTransactionId

	// no validation rules for TransactionStatus

	if len(errors) > 0 {
		return RefundPaymentResponseMultiError(errors)
	}

	return nil
}

// RefundPaymentResponseMultiError is an error wrapping multiple validation
// errors returned by RefundPaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type RefundPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundPaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundPaymentResponseMultiError) AllErrors() []error { return m }

// RefundPaymentResponseValidationError is the validation error returned by
// RefundPaymentResponse.Validate if the designated constraints aren't met.
type RefundPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundPaymentResponseValidationError) ErrorName() string {
	return "RefundPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefundPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundPaymentResponseValidationError{}

// Validate checks the field values on CapturePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CapturePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapturePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapturePaymentRequestMultiError, or nil if none found.
func (m *CapturePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CapturePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetTransactionId()) != 24 {
		err := CapturePaymentRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be 24 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CapturePaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CapturePaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CapturePaymentRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CapturePaymentRequestMultiError(errors)
	}

	return nil
}

// CapturePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CapturePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CapturePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapturePaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapturePaymentRequestMultiError) AllErrors() []error { return m }

// CapturePaymentRequestValidationError is the validation error returned by
// CapturePaymentRequest.Validate if the designated constraints aren't met.
type CapturePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapturePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapturePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapturePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapturePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapturePaymentRequestValidationError) ErrorName() string {
	return "CapturePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CapturePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapturePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapturePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapturePaymentRequestValidationError{}

// Validate checks the field values on CapturePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CapturePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapturePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapturePaymentResponseMultiError, or nil if none found.
func (m *CapturePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CapturePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PaymentTransactionId

	// no validation rules for TransactionStatus

	if len(errors) > 0 {
		return CapturePaymentResponseMultiError(errors)
	}

	return nil
}

// CapturePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CapturePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CapturePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapturePaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapturePaymentResponseMultiError) AllErrors() []error { return m }

// CapturePaymentResponseValidationError is the validation error returned by
// CapturePaymentResponse.Validate if the designated constraints aren't met.
type CapturePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapturePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapturePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapturePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapturePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapturePaymentResponseValidationError) ErrorName() string {
	return "CapturePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CapturePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapturePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapturePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapturePaymentResponseValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RequestedId

	// no validation rules for PaymentTransactionId

	// no validation rules for UserId

	// no validation rules for UserKey

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentMethod

	// no validation rules for Action

	// no validation rules for TransactionStatus

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on GetTransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionsRequestMultiError, or nil if none found.
func (m *GetTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if len(item) != 24 {
			err := GetTransactionsRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value length must be 24 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetTransactionsRequestMultiError(errors)
	}

	return nil
}

// GetTransactionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionsRequestMultiError) AllErrors() []error { return m }

// GetTransactionsRequestValidationError is the validation error returned by
// GetTransactionsRequest.Validate if the designated constraints aren't met.
type GetTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsRequestValidationError) ErrorName() string {
	return "GetTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsRequestValidationError{}

// Validate checks the field values on GetTransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionsResponseMultiError, or nil if none found.
func (m *GetTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransactionsResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransactionsResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTransactionsResponseMultiError(errors)
	}

	return nil
}

// GetTransactionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionsResponseMultiError) AllErrors() []error { return m }

// GetTransactionsResponseValidationError is the validation error returned by
// GetTransactionsResponse.Validate if the designated constraints aren't met.
type GetTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsResponseValidationError) ErrorName() string {
	return "GetTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsResponseValidationError{}
